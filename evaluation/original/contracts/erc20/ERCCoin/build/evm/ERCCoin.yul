/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 1:"./sources/ERCCoin.move"
///        , 2:"./../../../libs/stdlib/sources/U256.move"
///        , 3:"./../../../libs/stdlib/sources/Evm.move"


object "A2_erc_coin" {
    code {
        mstore(0, memoryguard(160))
        A2_erc_coin_create()
        codecopy(0, dataoffset("A2_erc_coin_deployed"), datasize("A2_erc_coin_deployed"))
        return(0, datasize("A2_erc_coin_deployed"))
        function A2_erc_coin_create() {
            let $t1, $t2, $t3, $t4
            let $locals := $Malloc(32)
            // $t1 := Evm::sender()
            /// @src 1:366:374
            $t1 := A2_Evm_sender()
            // $t0 := Evm::sign($t1)
            /// @src 1:361:375
            mstore($locals, A2_Evm_sign($t1))
            // $t2 := borrow_local($t0)
            /// @src 1:360:375
            $t2 := $MakePtr(false, $locals)
            // $t3 := false
            /// @src 1:377:394
            $t3 := false
            // $t4 := pack erc_coin::MintCapability($t3)
            /// @src 1:377:394
            {
                let $mem := $Malloc(1)
                $MemoryStoreU8(add($mem, 0), $t3)
                $t4 := $mem
            }
            // move_to<erc_coin::MintCapability>($t4, $t2)
            /// @src 1:352:359
            {
                let $base_offset := $MakeTypeStorageBase(0, 0xed799e2e, $LoadU256($t2))
                if $AlignedStorageLoad($base_offset) {
                  $AbortBuiltin()
                }
                $AlignedStorageStore($base_offset, true)
                {
                    let $dst := add($base_offset, 32)
                    let $src := $t4
                    $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                    $Free($src, 1)
                }
            }
            // return ()
            /// @src 1:395:396
            $Free($locals, 32)
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Evm_sender() -> $result {
            let $t0
            // $t0 := Evm::msg_sender()
            /// @src 3:442:454
            $t0 := A2_Evm_msg_sender()
            // return $t0
            /// @src 3:442:454
            $result := $t0
        }

        function A2_Evm_msg_sender() -> result {
          result := caller()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
    object "A2_erc_coin_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xa9059cbb
                {
                    // transfer(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(4, calldatasize())
                    A2_erc_coin_transfer(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x8f049ba5
                {
                    // deposit(address,(uint256))
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address__uint256_$_$address_A2_erc_coin_Coin$(4, calldatasize())
                    A2_erc_coin_deposit(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x2f576f20
                {
                    // doNothing()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_erc_coin_do_nothing()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf8b2cb4f
                {
                    // getBalance(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$_$address$(4, calldatasize())
                    let ret_0 := A2_erc_coin_get_balance(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x276876c5
                {
                    // hasMintCapability(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$_$address$(4, calldatasize())
                    let ret_0 := A2_erc_coin_has_mint_capability(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa0712d68
                {
                    // mint(uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint256$_$A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_erc_coin_mint(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint256_$_$A2_erc_coin_Coin$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x9c49514a
                {
                    // mintCapability()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_erc_coin_mint_capability()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb723b34e
                {
                    // mintTo(uint256,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint256_address$_$A2_U256_U256_address$(4, calldatasize())
                    A2_erc_coin_mint_to(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1aa3a008
                {
                    // register()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_erc_coin_register()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x2e1a7d4d
                {
                    // withdraw(uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint256$_$A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_erc_coin_withdraw(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint256_$_$A2_erc_coin_Coin$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x9470b0bd
                {
                    // withdrawFrom(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(4, calldatasize())
                    let ret_0 := A2_erc_coin_withdraw_from(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint256_$_$A2_erc_coin_Coin$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_erc_coin_transfer(to, amount) {
                let sender_coin, $t3, $t4, $t5, $t6
                // $t3 := 0x0
                /// @src 1:1107:1111
                $t3 := 0x0
                // $t4 := !=($t0, $t3)
                /// @src 1:1104:1106
                /// @src 1:1104:1106
                $t4 := $Neq(to, $t3)
                // $t5 := [116, 114, 97, 110, 115, 102, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 122, 101, 114, 111, 32, 97, 100, 100, 114, 101, 115, 115]
                /// @src 1:1113:1144
                $t5 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(28)))
                $MemoryStoreU64($t5, 28)
                $MemoryStoreU64(add($t5, 8), $ClosestGreaterPowerOfTwo(28))
                copy_literal_string_to_memory_664983336(add($t5, 32))
                // Evm::require($t4, $t5)
                /// @src 1:1093:1145
                A2_Evm_require($t4, $t5)
                // $t6 := erc_coin::withdraw($t1)
                /// @src 1:1173:1189
                $t6 := A2_erc_coin_withdraw(amount)
                // erc_coin::deposit($t0, $t6)
                /// @src 1:1199:1223
                A2_erc_coin_deposit(to, $t6)
                // return ()
                /// @src 1:1223:1224
            }

            function A2_erc_coin_deposit(to, coin) {
                let coin_1, value, $t4, $t5, $t6, $t7, $t8, $t9
                // $t4 := unpack erc_coin::Coin($t1)
                /// @src 1:2387:2401
                $t4 := $MemoryLoadU256(add(coin, 0))
                $Free(coin, 32)
                // $t5 := borrow_global<erc_coin::Coin>($t0)
                /// @src 1:2429:2446
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x72cabed3, to)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t5 := $MakePtr(true, add($base_offset, 32))
                }
                // $t6 := borrow_field<erc_coin::Coin>.value($t5)
                /// @src 1:2483:2493
                $t6 := $t5
                // $t7 := read_ref($t6)
                /// @src 1:2483:2493
                $t7 := $LoadU256($t6)
                // $t8 := +($t7, $t4)
                /// @src 1:2479:2501
                $t8 := $AddU256($t7, $t4)
                // $t9 := borrow_field<erc_coin::Coin>.value($t5)
                /// @src 1:2466:2476
                $t9 := $t5
                // write_ref($t9, $t8)
                /// @src 1:2466:2501
                $StoreU256($t9, $t8)
                // return ()
                /// @src 1:2501:2502
            }

            function A2_erc_coin_do_nothing() {
                // return ()
                /// @src 1:3384:3386
            }

            function A2_erc_coin_get_balance(account) -> $result {
                let $t1, $t2, $t3
                // $t1 := borrow_global<erc_coin::Coin>($t0)
                /// @src 1:3264:3277
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x72cabed3, account)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t1 := $MakePtr(true, add($base_offset, 32))
                }
                // $t2 := borrow_field<erc_coin::Coin>.value($t1)
                /// @src 1:3302:3312
                $t2 := $t1
                // $t3 := read_ref($t2)
                /// @src 1:3302:3312
                $t3 := $LoadU256($t2)
                // return $t3
                /// @src 1:3302:3312
                $result := $t3
            }

            function A2_erc_coin_has_mint_capability(account) -> $result {
                let $t1
                // $t1 := exists<erc_coin::MintCapability>($t0)
                /// @src 1:545:551
                $t1 := $AlignedStorageLoad($MakeTypeStorageBase(0, 0xed799e2e, account))
                // return $t1
                /// @src 1:545:576
                $result := $t1
            }

            function A2_erc_coin_mint(amount) -> $result {
                let $t1, $t2, $t3, $t4
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        /// @src 1:2763:2811
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t3 := 0
                        /// @src 1:2809:2810
                        $t3 := 0
                        // abort($t3)
                        /// @src 1:2763:2811
                        $Abort($t3)
                    }
                    case 4 {
                        // $t1 := Evm::sender()
                        /// @src 1:2745:2753
                        $t1 := A2_Evm_sender()
                        // $t2 := exists<erc_coin::MintCapability>($t1)
                        /// @src 1:2771:2777
                        $t2 := $AlignedStorageLoad($MakeTypeStorageBase(0, 0xed799e2e, $t1))
                        // if ($t2) goto L1 else goto L0
                        /// @src 1:2763:2811
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t4 := pack erc_coin::Coin($t0)
                        /// @src 1:2821:2843
                        {
                            let $mem := $Malloc(32)
                            $MemoryStoreU256(add($mem, 0), amount)
                            $t4 := $mem
                        }
                        // return $t4
                        /// @src 1:2821:2843
                        $result := $t4
                        leave
                    }
                }
            }

            function A2_erc_coin_mint_capability() {
                let $t0, $t1, $t2
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        /// @src 1:711:759
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t2 := 0
                        /// @src 1:757:758
                        $t2 := 0
                        // abort($t2)
                        /// @src 1:711:759
                        $Abort($t2)
                    }
                    case 4 {
                        // $t0 := Evm::sender()
                        /// @src 1:693:701
                        $t0 := A2_Evm_sender()
                        // $t1 := exists<erc_coin::MintCapability>($t0)
                        /// @src 1:719:725
                        $t1 := $AlignedStorageLoad($MakeTypeStorageBase(0, 0xed799e2e, $t0))
                        // if ($t1) goto L1 else goto L0
                        /// @src 1:711:759
                        switch $t1
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // return ()
                        /// @src 1:759:760
                        leave
                    }
                }
            }

            function A2_erc_coin_mint_to(amount, to) {
                let $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        /// @src 1:3010:3058
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t4 := 0
                        /// @src 1:3056:3057
                        $t4 := 0
                        // abort($t4)
                        /// @src 1:3010:3058
                        $Abort($t4)
                    }
                    case 4 {
                        // $t2 := Evm::sender()
                        /// @src 1:2992:3000
                        $t2 := A2_Evm_sender()
                        // $t3 := exists<erc_coin::MintCapability>($t2)
                        /// @src 1:3018:3024
                        $t3 := $AlignedStorageLoad($MakeTypeStorageBase(0, 0xed799e2e, $t2))
                        // if ($t3) goto L1 else goto L0
                        /// @src 1:3010:3058
                        switch $t3
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t5 := pack erc_coin::Coin($t0)
                        /// @src 1:3080:3102
                        {
                            let $mem := $Malloc(32)
                            $MemoryStoreU256(add($mem, 0), amount)
                            $t5 := $mem
                        }
                        // erc_coin::deposit($t1, $t5)
                        /// @src 1:3068:3103
                        A2_erc_coin_deposit(to, $t5)
                        // return ()
                        /// @src 1:3068:3103
                        leave
                    }
                }
            }

            function A2_erc_coin_register() {
                let acc, coin, $t3, $t4, $t5, $t6
                let $locals := $Malloc(32)
                // $t3 := Evm::sender()
                /// @src 1:849:857
                $t3 := A2_Evm_sender()
                // $t4 := U256::zero()
                /// @src 1:892:898
                $t4 := A2_U256_zero()
                // $t5 := pack erc_coin::Coin($t4)
                /// @src 1:878:900
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t4)
                    $t5 := $mem
                }
                // $t0 := Evm::sign($t3)
                /// @src 1:919:928
                mstore($locals, A2_Evm_sign($t3))
                // $t6 := borrow_local($t0)
                /// @src 1:918:928
                $t6 := $MakePtr(false, $locals)
                // move_to<erc_coin::Coin>($t5, $t6)
                /// @src 1:910:917
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x72cabed3, $LoadU256($t6))
                    if $AlignedStorageLoad($base_offset) {
                      $AbortBuiltin()
                    }
                    $AlignedStorageStore($base_offset, true)
                    {
                        let $dst := add($base_offset, 32)
                        let $src := $t5
                        $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                        $Free($src, 32)
                    }
                }
                // return ()
                /// @src 1:935:936
                $Free($locals, 32)
            }

            function A2_erc_coin_withdraw(amount) -> $result {
                let coin, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                // $t2 := Evm::sender()
                /// @src 1:1504:1512
                $t2 := A2_Evm_sender()
                // $t3 := borrow_global<erc_coin::Coin>($t2)
                /// @src 1:1533:1550
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x72cabed3, $t2)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t3 := $MakePtr(true, add($base_offset, 32))
                }
                // $t4 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:1599:1609
                $t4 := $t3
                // $t5 := read_ref($t4)
                /// @src 1:1599:1609
                $t5 := $LoadU256($t4)
                // $t6 := <=($t0, $t5)
                /// @src 1:1588:1610
                $t6 := $LtEq(amount, $t5)
                // $t7 := [69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 97, 109, 111, 117, 110, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 98, 97, 108, 97, 110, 99, 101]
                /// @src 1:1612:1653
                $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(38)))
                $MemoryStoreU64($t7, 38)
                $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(38))
                copy_literal_string_to_memory_2833778497(add($t7, 32))
                // Evm::require($t6, $t7)
                /// @src 1:1580:1654
                A2_Evm_require($t6, $t7)
                // $t8 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:1681:1691
                $t8 := $t3
                // $t9 := read_ref($t8)
                /// @src 1:1681:1691
                $t9 := $LoadU256($t8)
                // $t10 := -($t9, $t0)
                /// @src 1:1677:1700
                $t10 := $Sub($t9, amount)
                // $t11 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:1664:1674
                $t11 := $t3
                // write_ref($t11, $t10)
                /// @src 1:1664:1700
                $StoreU256($t11, $t10)
                // $t12 := pack erc_coin::Coin($t0)
                /// @src 1:1710:1732
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), amount)
                    $t12 := $mem
                }
                // return $t12
                /// @src 1:1710:1732
                $result := $t12
            }

            function A2_erc_coin_withdraw_from(acc, amount) -> $result {
                let coin, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                // $t3 := borrow_global<erc_coin::Coin>($t0)
                /// @src 1:2043:2060
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x72cabed3, acc)
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t3 := $MakePtr(true, add($base_offset, 32))
                }
                // $t4 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:2100:2110
                $t4 := $t3
                // $t5 := read_ref($t4)
                /// @src 1:2100:2110
                $t5 := $LoadU256($t4)
                // $t6 := <=($t1, $t5)
                /// @src 1:2089:2111
                $t6 := $LtEq(amount, $t5)
                // $t7 := [69, 82, 67, 50, 48, 58, 32, 116, 114, 97, 110, 115, 102, 101, 114, 32, 97, 109, 111, 117, 110, 116, 32, 101, 120, 99, 101, 101, 100, 115, 32, 98, 97, 108, 97, 110, 99, 101]
                /// @src 1:2113:2154
                $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(38)))
                $MemoryStoreU64($t7, 38)
                $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(38))
                copy_literal_string_to_memory_2833778497(add($t7, 32))
                // Evm::require($t6, $t7)
                /// @src 1:2081:2155
                A2_Evm_require($t6, $t7)
                // $t8 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:2182:2192
                $t8 := $t3
                // $t9 := read_ref($t8)
                /// @src 1:2182:2192
                $t9 := $LoadU256($t8)
                // $t10 := -($t9, $t1)
                /// @src 1:2178:2201
                $t10 := $Sub($t9, amount)
                // $t11 := borrow_field<erc_coin::Coin>.value($t3)
                /// @src 1:2165:2175
                $t11 := $t3
                // write_ref($t11, $t10)
                /// @src 1:2165:2201
                $StoreU256($t11, $t10)
                // $t12 := pack erc_coin::Coin($t1)
                /// @src 1:2211:2233
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), amount)
                    $t12 := $mem
                }
                // return $t12
                /// @src 1:2211:2233
                $result := $t12
            }

            function A2_Evm_require(cond, message) {
                let $t2
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // Evm::abort_with($t1)
                        /// @src 3:3469:3488
                        A2_Evm_abort_with(message)
                        // goto L0
                        /// @src 3:3456:3491
                        $block := 3
                    }
                    case 3 {
                        // label L0
                        // return ()
                        /// @src 3:3456:3491
                        leave
                    }
                    case 4 {
                        // $t2 := !($t0)
                        /// @src 3:3460:3461
                        $t2 := $LogicalNot(cond)
                        // if ($t2) goto L1 else goto L0
                        /// @src 3:3456:3491
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                }
            }

            function A2_Evm_abort_with(message) {
              let head := $Malloc(32)
              // store the function selector for Error(string)
              mstore(head, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
              let pos := add(head, 4)
              mstore(pos, 32)
              pos := add(pos, 32)
              let size := $MemoryLoadU64(message)
              mstore(pos, size)
              pos := add(pos, 32)
              $CopyMemory(add(message, 32), pos, size)
              size := $RoundUp(size)
              let end := add(pos, size)
              revert(head, sub(end, head))
            }
            function A2_Evm_sender() -> $result {
                let $t0
                // $t0 := Evm::msg_sender()
                /// @src 3:442:454
                $t0 := A2_Evm_msg_sender()
                // return $t0
                /// @src 3:442:454
                $result := $t0
            }

            function A2_Evm_msg_sender() -> result {
              result := caller()
            }
            function A2_Evm_sign(addr) -> signer {
              signer := addr
            }
            function A2_U256_zero() -> $result {
                let $t0
                // $t0 := 0
                /// @src 2:991:1012
                $t0 := 0
                // return $t0
                /// @src 2:991:1012
                $result := $t0
            }

            function copy_literal_string_to_memory_2833778497(value) {
                $MemoryStoreU8(value, 69)
                value := add(value, 1)
                $MemoryStoreU8(value, 82)
                value := add(value, 1)
                $MemoryStoreU8(value, 67)
                value := add(value, 1)
                $MemoryStoreU8(value, 50)
                value := add(value, 1)
                $MemoryStoreU8(value, 48)
                value := add(value, 1)
                $MemoryStoreU8(value, 58)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 116)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 110)
                value := add(value, 1)
                $MemoryStoreU8(value, 115)
                value := add(value, 1)
                $MemoryStoreU8(value, 102)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 109)
                value := add(value, 1)
                $MemoryStoreU8(value, 111)
                value := add(value, 1)
                $MemoryStoreU8(value, 117)
                value := add(value, 1)
                $MemoryStoreU8(value, 110)
                value := add(value, 1)
                $MemoryStoreU8(value, 116)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 120)
                value := add(value, 1)
                $MemoryStoreU8(value, 99)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 100)
                value := add(value, 1)
                $MemoryStoreU8(value, 115)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 98)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 108)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 110)
                value := add(value, 1)
                $MemoryStoreU8(value, 99)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
            }
            function copy_literal_string_to_memory_664983336(value) {
                $MemoryStoreU8(value, 116)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 110)
                value := add(value, 1)
                $MemoryStoreU8(value, 115)
                value := add(value, 1)
                $MemoryStoreU8(value, 102)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 116)
                value := add(value, 1)
                $MemoryStoreU8(value, 111)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 116)
                value := add(value, 1)
                $MemoryStoreU8(value, 104)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 122)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 111)
                value := add(value, 1)
                $MemoryStoreU8(value, 32)
                value := add(value, 1)
                $MemoryStoreU8(value, 97)
                value := add(value, 1)
                $MemoryStoreU8(value, 100)
                value := add(value, 1)
                $MemoryStoreU8(value, 100)
                value := add(value, 1)
                $MemoryStoreU8(value, 114)
                value := add(value, 1)
                $MemoryStoreU8(value, 101)
                value := add(value, 1)
                $MemoryStoreU8(value, 115)
                value := add(value, 1)
                $MemoryStoreU8(value, 115)
                value := add(value, 1)
            }
            function abi_encode_tuple_$_uint256_$_$A2_erc_coin_Coin$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_$uint256$_$A2_erc_coin_Coin$(value_0, add(headStart, 0))
            }
            function abi_encode_$uint256$_$A2_erc_coin_Coin$(value, pos)  {
                let tail := add(pos, 32)
                let value_0 := $MemoryLoadU256(add(value, 0))
                abi_encode_uint256(value_0, add(pos, 0))
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$address_uint256$_$address_A2_U256_U256$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$uint256$_$A2_U256_U256$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$uint256_address$_$A2_U256_U256_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$bool$_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$address$_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint256$_$A2_U256_U256$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint256(value_0, add(headStart, 0))
            }
            function abi_decode_tuple_$address__uint256_$_$address_A2_erc_coin_Coin$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_$uint256$_$A2_erc_coin_Coin$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_$uint256$_$A2_erc_coin_Coin$(headStart, end) -> value {
                if slt(sub(end, headStart), 32) { $Abort(90) }
                let value_0
                value := $Malloc(32)
                {
                    let offset := 0
                    value_0 := abi_decode_uint256(add(headStart, offset), end)
                }
                $MemoryStoreU256(add(value, 0), value_0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $StoreU256(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU256(offs, val)
              }
              default {
                $StorageStoreU256(offs, val)
              }
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $StorageStoreU256(offs, val) {
              $StorageStoreBytes(offs, 32, val)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(5, offs)
              sstore($StorageKey(0, word_offs), val)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $AddU256(x, y) -> r {
                if lt(sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $LtEq(x, y) -> r {
                r := or(lt(x, y), eq(x, y))
            }
            function $Neq(x, y) -> r {
                r := $LogicalNot(eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
            function $RoundUp(value) -> result {
                result := and(add(value, 31), not(31))
            }
        }
    }
}
