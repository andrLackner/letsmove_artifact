1c1,3
< module just_memo::counter {
---
> #[evm_contract]
> module Evm::counter {
>     use Evm::Evm::{sender, sign};
3,6c5
<     const MODULE_ADMIN: address = @just_memo;
< 
<     #[derive(Debug)]
<     struct Counter<phantom X> has key {
---
>     struct Counter has key {
10,11c9
<     #[derive(Debug)]
<     struct Price<phantom X> has key {
---
>     struct Price has key {
16,19c14,18
<     entry fun create_counter<X>(admin: &signer)
<     {
<         let counter = Counter<X> { value: 0 };
<         move_to<Counter<X>>(admin, counter);
---
>     #[callable(sig=b"createCounter()")]
>     entry fun create_counter() {
>         let admin_addr = sender();
>         let counter = Counter { value: 0 };
>         move_to<Counter>(&sign(admin_addr), counter);
22,25c21,24
<     entry fun push_counter<X>(value: u64)
<     acquires Counter
<     {
<         let counter = borrow_global_mut<Counter<X>>(MODULE_ADMIN);
---
>     #[callable(sig=b"pushCounter(uint64)")]
>     entry fun push_counter(value: u64) acquires Counter {
>         let addr = sender();
>         let counter = borrow_global_mut<Counter>(addr);
29,32c28,32
<     entry fun create_price<X>(admin: &signer)
<     {
<         let price = Price<X> { value: 0, dec: 0 };
<         move_to(admin, price);
---
>     #[callable(sig=b"createPrice()")]
>     entry fun create_price() {
>         let admin_addr = sender();
>         let price = Price { value: 0, dec: 0 };
>         move_to(&sign(admin_addr), price);
35,38c35,38
<     entry fun push_price<X>(value: u64, dec: u8)
<     acquires Price
<     {
<         let price = borrow_global_mut<Price<X>>(MODULE_ADMIN);
---
>     #[callable(sig=b"pushPrice(uint64,uint8)")]
>     entry fun push_price(value: u64, dec: u8) acquires Price {
>         let addr = sender();
>         let price = borrow_global_mut<Price>(addr);
